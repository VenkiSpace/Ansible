
---

  - name: Task 1 => Collect service status from the target system
    stat: path=/etc/init.d/{{serviceName}}
    register: service_status


  - name: Task 2 => Check whether the input service '{{ serviceName }}' exists in the target system  or not
    assert:
      that:
        service_status.stat.exists
      fail_msg: "Status: Failed !!! Status Message: The input service '{{ serviceName }}'  does not exist in the target system"


  - name: Task 3  => Collect Service Details from the target system
    service_facts:
  
  
  - name: Task 4 => Confirm that the service is running in the target system
    assert:
      that:
        ansible_facts['services']['{{serviceName}}']['state'] != 'running' 
      fail_msg: "Status: Aborted !!! Status Message: The input service '{{ serviceName }}' is already running in the target system."
    when: 0 > 1


  - name: Task 5  => Start service '{{ serviceName }}' in the target system
    ansible.builtin.service:
      name: "{{serviceName}}"
      state: started
  

  - name: Task 6 => Collect Service Details from the target system
    service_facts:
    

  - name: Task 7 => Confirm that the service is running 
    assert:
      that:
        ansible_facts['services']['{{serviceName}}']['state'] == 'running' 
      success_msg: "Status: Success !!! Status Message: The input service '{{ serviceName }}' is started in the target system."
      fail_msg: "Status: Failure !!! Status Message: The input service '{{ serviceName }}' is not started in the target system."
    when: 0 > 1


  - name: Task 8 => Print target Host Name
    ansible.builtin.debug:
      msg: HostName => {{ inventory_hostname }}


  - name: Task 9 => Print target IP Address
    ansible.builtin.debug:
      msg: IPAddress => {{hostvars[inventory_hostname]['ansible_env'].SSH_CONNECTION.split(' ' )[2]}}

